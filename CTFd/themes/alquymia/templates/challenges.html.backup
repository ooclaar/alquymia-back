{% extends "base.html" %}

{% block content %}
<!-- Partículas de fundo -->
<div id="particles-container"></div>

<!-- Hero Section -->
<section class="challenges-hero">
    <div class="container">
        <span class="badge">4ª EDIÇÃO</span>
        <h1 class="glitch" data-text="DESAFIOS CTF 2025">DESAFIOS CTF 2025</h1>
        <p class="subtitle">Explore os desafios divididos por categoria e teste suas habilidades</p>
        <div class="hero-stats">
            <div class="stat-item">
                <span class="stat-number" id="total-challenges">18+</span>
                <span class="stat-label">Desafios</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">6</span>
                <span class="stat-label">Categorias</span>
            </div>
            <div class="stat-item">
                <span class="stat-number" id="total-points">3850+</span>
                <span class="stat-label">Pontos</span>
            </div>
        </div>
    </div>
</section>

<!-- Filtros de Categoria -->
<section class="category-filters">
    <div class="container">
        <button class="filter-btn active" data-category="all">🎯 Todos</button>
        <button class="filter-btn" data-category="Crypto">🔐 Criptografia</button>
        <button class="filter-btn" data-category="Web">🌐 Web</button>
        <button class="filter-btn" data-category="Forensics">🔍 Forense</button>
        <button class="filter-btn" data-category="Stego">🖼️ Esteganografia</button>
        <button class="filter-btn" data-category="Reverse">⚙️ Reversing</button>
        <button class="filter-btn" data-category="MISC">🎲 MISC</button>
    </div>
</section>

<!-- Grid de Desafios -->
<section class="challenges-grid">
    <div class="container" id="challenges-container">
        <!-- Os desafios serão carregados aqui via JavaScript -->
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Carregando desafios...</p>
        </div>
    </div>
</section>

{% endblock %}

{% block scripts %}
<script>
// Mapeamento de categorias para ícones e cores
const categoryConfig = {
    'Crypto': { icon: '🔐', name: 'Criptografia', class: 'crypto' },
    'Web': { icon: '🌐', name: 'Web', class: 'web' },
    'Forensics': { icon: '🔍', name: 'Forense', class: 'forensics' },
    'Stego': { icon: '🖼️', name: 'Esteganografia', class: 'stego' },
    'Reverse': { icon: '⚙️', name: 'Reversing', class: 'reverse' },
    'MISC': { icon: '🎲', name: 'MISC', class: 'misc' }
};

// Função para obter o token CSRF
function getCSRFToken() {
    return document.querySelector('meta[name="csrf-token"]')?.content || '';
}

// Função para buscar todos os desafios
async function fetchChallenges() {
    try {
        const response = await fetch('/api/v1/challenges');
        const data = await response.json();
        return data.success ? data.data : [];
    } catch (error) {
        console.error('Erro ao buscar desafios:', error);
        return [];
    }
}

// Função para determinar a dificuldade baseada nos pontos
function getDifficulty(points) {
    if (points <= 100) return { level: 'easy', label: 'FÁCIL' };
    if (points <= 250) return { level: 'medium', label: 'MÉDIO' };
    return { level: 'hard', label: 'DIFÍCIL' };
}

// Função para criar um card de desafio
function createChallengeCard(challenge) {
    const category = challenge.category || 'MISC';
    const config = categoryConfig[category] || categoryConfig['MISC'];
    const difficulty = getDifficulty(challenge.value);
    const tags = challenge.tags || [];
    
    const card = document.createElement('div');
    card.className = `challenge-card ${challenge.solved_by_me ? 'solved' : ''}`;
    card.dataset.category = category;
    card.dataset.difficulty = difficulty.level;
    card.dataset.challengeId = challenge.id;
    
    card.innerHTML = `
        <div class="card-header">
            <span class="category-badge ${config.class}">${config.icon} ${config.name}</span>
            <span class="difficulty ${difficulty.level}">${difficulty.label}</span>
        </div>
        <h3 class="challenge-title">${challenge.name}</h3>
        <p class="challenge-description">${challenge.description || 'Sem descrição disponível'}</p>
        <div class="card-footer">
            <span class="points">🏆 ${challenge.value} pontos</span>
            <span class="solves">👥 ${challenge.solves || 0} resoluções</span>
        </div>
        
        <!-- Conteúdo expandido (inicialmente oculto) -->
        <div class="challenge-expanded" style="display: none;">
            <div class="expanded-divider"></div>
            
            ${challenge.description ? `
            <div class="expanded-section">
                <h4>📝 Descrição Completa</h4>
                <div class="description-box">${challenge.description}</div>
            </div>
            ` : ''}
            
            ${challenge.connection_info ? `
            <div class="expanded-section">
                <h4>🔗 Informações de Conexão</h4>
                <div class="connection-box">
                    <code>${challenge.connection_info}</code>
                </div>
            </div>
            ` : ''}
            
            ${challenge.files && challenge.files.length > 0 ? `
            <div class="expanded-section">
                <h4>📁 Arquivos</h4>
                <div class="files-list">
                    ${challenge.files.map(file => `
                        <a href="${file}" class="file-download" target="_blank">
                            <span>📥</span> Download
                        </a>
                    `).join('')}
                </div>
            </div>
            ` : ''}
            
            ${tags.length > 0 ? `
            <div class="expanded-section">
                <h4>🏷️ Tags</h4>
                <div class="tags-list">
                    ${tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
            </div>
            ` : ''}
            
            <div class="expanded-section">
                <h4>🚩 Submeter Flag</h4>
                <form class="flag-form" data-challenge-id="${challenge.id}">
                    <div class="flag-input-group">
                        <input 
                            type="text" 
                            class="flag-input" 
                            placeholder="Digite a flag aqui..." 
                            required
                            autocomplete="off"
                        >
                        <button type="submit" class="submit-btn">
                            <span class="btn-text">SUBMETER</span>
                            <span class="btn-loading" style="display: none;">
                                <div class="btn-spinner"></div>
                            </span>
                        </button>
                    </div>
                    <div class="flag-feedback" style="display: none;"></div>
                </form>
            </div>
        </div>
    `;
    
    // Adicionar evento de clique para expandir/recolher
    const cardHeader = card.querySelector('.card-header, .challenge-title, .challenge-description, .card-footer');
    const expandedContent = card.querySelector('.challenge-expanded');
    
    card.addEventListener('click', (e) => {
        // Não expandir se clicar em links ou formulários
        if (e.target.closest('a, form, button, input')) return;
        
        const isExpanded = expandedContent.style.display !== 'none';
        
        if (isExpanded) {
            expandedContent.style.display = 'none';
            card.classList.remove('expanded');
        } else {
            expandedContent.style.display = 'block';
            card.classList.add('expanded');
        }
    });
    
    // Adicionar evento de submissão do formulário
    const form = card.querySelector('.flag-form');
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        await submitFlag(form, challenge.id);
    });
    
    return card;
}

// Função para submeter a flag
async function submitFlag(form, challengeId) {
    const input = form.querySelector('.flag-input');
    const submitBtn = form.querySelector('.submit-btn');
    const btnText = submitBtn.querySelector('.btn-text');
    const btnLoading = submitBtn.querySelector('.btn-loading');
    const feedback = form.querySelector('.flag-feedback');
    
    const submission = input.value.trim();
    
    if (!submission) {
        showFeedback(feedback, 'Por favor, digite uma flag', 'error');
        return;
    }
    
    // Mostrar loading
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline-block';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch('/api/v1/challenges/attempt', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': getCSRFToken()
            },
            body: JSON.stringify({
                challenge_id: parseInt(challengeId),
                submission: submission
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            const status = result.data.status;
            
            if (status === 'correct') {
                showFeedback(feedback, '🎉 Flag correta! Parabéns!', 'success');
                input.value = '';
                
                // Marcar o card como resolvido
                const card = form.closest('.challenge-card');
                card.classList.add('solved');
                
                // Atualizar contagem de resoluções
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else if (status === 'incorrect') {
                showFeedback(feedback, '❌ Flag incorreta. Tente novamente!', 'error');
            } else {
                showFeedback(feedback, `ℹ️ ${result.data.message || 'Status desconhecido'}`, 'info');
            }
        } else {
            showFeedback(feedback, '❌ Erro ao submeter flag', 'error');
        }
    } catch (error) {
        console.error('Erro ao submeter flag:', error);
        showFeedback(feedback, '❌ Erro de conexão. Tente novamente.', 'error');
    } finally {
        // Esconder loading
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
        submitBtn.disabled = false;
    }
}

// Função para mostrar feedback
function showFeedback(feedbackElement, message, type) {
    feedbackElement.textContent = message;
    feedbackElement.className = `flag-feedback ${type}`;
    feedbackElement.style.display = 'block';
    
    setTimeout(() => {
        feedbackElement.style.display = 'none';
    }, 5000);
}

// Função para renderizar os desafios
function renderChallenges(challenges) {
    const container = document.getElementById('challenges-container');
    container.innerHTML = '';
    
    if (challenges.length === 0) {
        container.innerHTML = '<p class="no-challenges">Nenhum desafio disponível no momento.</p>';
        return;
    }
    
    challenges.forEach(challenge => {
        const card = createChallengeCard(challenge);
        container.appendChild(card);
    });
    
    // Atualizar estatísticas
    const totalPoints = challenges.reduce((sum, ch) => sum + ch.value, 0);
    document.getElementById('total-challenges').textContent = challenges.length + '+';
    document.getElementById('total-points').textContent = totalPoints + '+';
}

// Função para filtrar desafios
function filterChallenges(category) {
    const cards = document.querySelectorAll('.challenge-card');
    
    cards.forEach(card => {
        if (category === 'all' || card.dataset.category === category) {
            card.style.display = 'block';
        } else {
            card.style.display = 'none';
        }
    });
}

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', async () => {
    // Buscar e renderizar desafios
    const challenges = await fetchChallenges();
    renderChallenges(challenges);
    
    // Adicionar event listeners aos filtros
    const filterButtons = document.querySelectorAll('.filter-btn');
    filterButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            // Remover active de todos os botões
            filterButtons.forEach(b => b.classList.remove('active'));
            
            // Adicionar active ao botão clicado
            btn.classList.add('active');
            
            // Filtrar desafios
            const category = btn.dataset.category;
            filterChallenges(category);
        });
    });
});
</script>
{% endblock %}

